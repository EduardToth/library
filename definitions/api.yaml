openapi: "3.0.0"
info:
  version: 1.0.0
  title: LibraryAPI
paths:
  /:
    get:
      description: This endpoint returns "Hello world"
      operationId: "getHelloWorldMessage"
      responses:
        "200":
          description: Successful response
          content:
            "application/json":
              schema:
                type: string
        "404":
          description: "'Hello world' text not found"
        "5XX":
          description: Unexpected Error

  /book:
    get:
      operationId: getAllBooks
      description: This endpoint retrieves all books from the database
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: Not Found
        "5XX":
          description: Unexpected error
    post:
      operationId: "createBook"
      description: This endpoint creates a new book in the database
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/BookContent"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: "Bad request"
        "5XX":
          description: Unexpected error

  /book/{id}:
    get:
      operationId: getBook
      description: this endpoint gets a book after a given id
      parameters:
        - name: id
          description: id of a book
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Not Found
        "5XX":
          description: Unexpected Error
    delete:
      operationId: deleteBook
      description: This endpoint will delete a book after its id
      parameters:
        - name: id
          description: id of a book
          required: true
          in: path
          schema:
            type: string
      responses:
        204:
          description: No Content
        404:
          description: No Found
        "5XX":
          description: Unexpected Error
    put:
      operationId: updateBook
      description: This endpoint will update a book entity
      parameters:
        - name: id
          description: id of a book
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/BookContent"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"

        "409":
          description: Conflict

  # create the corresponding endpoints for getAllAuthors, modifyAuthor, getAuthor, deleteAuthor
  /author:
    post:
      operationId: createAuthor
      description: This endpoint will create a new author entity
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/AuthorContent"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Author"
        "400":
          description: "Bad request"
        "5XX":
          description: Unexpected error
    get:
      operationId: getAllAuthors
      description: This endpoint will return all the stored authors
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        "404":
          description: Not Found
        "5XX":
          description: Unexpected error

  /author/{id}:
    get:
      operationId: getAuthor
      description: This endpoint will provide an author corresponding to its id
      parameters:
        - name: id
          description: id of a book
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Author"
        "404":
          description: Not Found
        "5XX":
          description: Unexpected Error
  # create the corresponding endpoints for getBookShelf, getAllBookShelves, modifyBookShelf, deleteBookShelf, createBookShelf
  # create the corresponding endpoints for createLibrary, getAllLibraries, getLibrary, modifyLibrary, deleteLibrary, addBookShelfToLibray, addBookShelvesToLibrary
components:
  schemas:
    AuthorContent:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    Author:
      allOf:
        - $ref: "#/components/schemas/AuthorContent"
        - type: object
          properties:
            id:
              type: string
            booksWritten:
              type: array
              items:
                $ref: "#/components/schemas/Book"
          required:
            - id
            - booksWritten

    BookContent:
      type: object
      properties:
        title:
          type: string
        numberOfPages:
          type: number
        authorId:
          type: string
        bookShelfId:
          type: string
      required:
        - title
        - numberOfPages
        - authorId
        - bookShelfId

    Book:
      allOf:
        - $ref: "#/components/schemas/BookContent"
        - type: object
          properties:
            id:
              type: string
          required:
            - id

    BookShelfContent:
      type: object
      properties:
        libraryId:
          type: string
      required:
        - libraryId

    BookShelf:
      allOf:
        - $ref: "#/components/schemas/BookShelfContent"
        - type: object
          properties:
            id:
              type: string
            books:
              type: array
              items:
                $ref: "#/components/schemas/Book"
          required:
            - id
            - books

    LibraryContent:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    Library:
      allOf:
        - $ref: "#/components/schemas/LibraryContent"
        - type: object
          properties:
            id:
              type: string
            bookShelves:
              type: array
              items:
                $ref: "#/components/schemas/BookShelf"
          required:
            - id
            - bookShelves
